/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   PmergeMe.tpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rbutzke <rbutzke@student.42sp.org.br>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/20 14:37:01 by rbutzke           #+#    #+#             */
/*   Updated: 2025/01/30 15:49:40 by rbutzke          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "PmergeMe.hpp"

template<typename cType>
void	PmergeMe::binarySort(cType &origin){
	for (std::size_t i = 0; i < origin.size()-1; i+=2){
		if (i+1 < origin.size() && origin[i] > origin[i+1])
			std::swap(origin[i], origin[i+1]);
	}
}

template<typename cType>
void	PmergeMe::mergeInsertSort(cType &origin){
	typedef typename cType::iterator iter;
	cType min, max;

	if (origin.size() <= 1)
		return ;
	if (origin.size() % 2 != 0)
		origin.push_back(-1);
	binarySort(origin);
	for(iter it = origin.begin(); it != origin.end(); it+=2){
		min.push_back(*it);
		max.push_back(*(it+1));
	}
	std::sort(min.begin(), min.end());
	for(iter it = max.begin(); it != max.end(); it++)
		min.insert(std::lower_bound(min.begin(), min.end(), *it), *it);
	origin.clear();
	origin = min;
	if (origin[0] == -1)
		origin.erase(origin.begin(), origin.begin()+1);
	printConteiner(origin);
}

template<typename conteinerType>
conteinerType PmergeMe::split(std::string &input, char delimiter){
	conteinerType		conteiner;
	std::string			token;
	std::istringstream	iss(input);
	int					value = 0;

	if (input.empty())
		return conteiner;
	if (input.find(delimiter) == std::string::npos){
		if (not isNumeric(input))
			throw (std::runtime_error("Error: Input not numeric: " + input));
		value = std::atoi(input.c_str());
		if (value < 0)
			throw (std::runtime_error("Error: Is negative number: " + input));
		conteiner.push_back(value);
		return conteiner;
	}
	while (std::getline(iss, token, delimiter)){
		if (!token.empty()) {
			if (not isNumeric(token))
				throw (std::runtime_error("Error: Input not numeric: " + token));
			value = std::atoi(token.c_str());
			if (value < 0)
				throw (std::runtime_error("Error: Is negative number: " + token));
			conteiner.push_back(value);
		}
	}
	return conteiner;
}

template<typename str>
bool PmergeMe::isNumeric(str &number){
	if (number.empty())
		return true;
	for (std::size_t i = 0; i < number.size(); i++){
		if (number[i] == '-' || number[i] == '+')
			continue; 
		if (not std::isdigit(number[i]))
			return false;
	}
	return true;
}

template<typename conteinerType>
void PmergeMe::printConteiner(conteinerType conteiner){
	typename conteinerType::iterator it = conteiner.begin();

	for(; it != conteiner.end(); it++){

		std::cout << *it << ' ';
	}
	std::cout << '\n';
}

template<typename str>
void	PmergeMe::normalize(str &input){
	for (std::size_t i = 0; i < input.size(); i++){
		if (std::isspace(input[i]))
			input[i] = ' ';
	}
}